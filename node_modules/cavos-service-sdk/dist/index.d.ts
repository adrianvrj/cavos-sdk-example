/**
 * Cavos Service SDK
 *
 * Provides functions to interact with the external endpoints of the cavos-wallet-provider service,
 * including Auth0-based authentication, wallet management, and transaction execution.
 *
 * @module cavos-service-sdk
 */
/**
 * CavosAuth provides static methods for user registration, authentication, wallet management,
 * and transaction execution using the Cavos Wallet Provider and Auth0.
 */
declare class CavosAuth {
    /**
     * Register a new user in an organization (Auth0 Database Connection) and create a wallet for them.
     *
     * @param {string} email - The user's email address.
     * @param {string} password - The user's password.
     * @param {string} orgSecret - The organization's secret token (used as Bearer token).
     * @param {string} [network='sepolia'] - The network to deploy the wallet on (default: 'sepolia').
     * @returns {Promise<object>} The user data, wallet info, and Auth0 user_id.
     * @throws {Error} If registration or wallet deployment fails.
     */
    static signUp(email: string, password: string, orgSecret: string, network?: string): Promise<any>;
    /**
     * Log in a user using Auth0 (Resource Owner Password Grant) for the organization's connection.
     *
     * @param {string} email - The user's email address.
     * @param {string} password - The user's password.
     * @param {string} orgSecret - The organization's secret token (used as Bearer token).
     * @returns {Promise<object>} The user data, wallet info, and Auth0 access_token.
     * @throws {Error} If authentication fails.
     */
    static signIn(email: string, password: string, orgSecret: string): Promise<any>;
    /**
     * Deploy a new wallet using the cavos-wallet-provider external API.
     *
     * @param {string} network - The network to deploy the wallet on.
     * @param {string} apiKey - The API key or Bearer token for authentication.
     * @returns {Promise<object>} The wallet deployment data.
     * @throws {Error} If wallet deployment fails.
     */
    static deployWallet(network: string, apiKey: string): Promise<any>;
    /**
     * Execute an action (transaction) using the cavos-wallet-provider external API.
     *
     * @param {string} network - The network to execute the transaction on.
     * @param {any[]} calls - The transaction calls to execute.
     * @param {string} address - The wallet address.
     * @param {string} hashedPk - The hashed private key.
     * @param {string} apiKey - The API key or Bearer token for authentication.
     * @returns {Promise<object>} The transaction result.
     * @throws {Error} If the transaction fails.
     */
    static executeAction(network: string, calls: any[], address: string, hashedPk: string, apiKey: string): Promise<any>;
    /**
     * Get token transfers for a given transaction hash.
     *
     * @param {string} txHash - The transaction hash.
     * @param {string} [network='mainnet'] - The network to query (default: 'mainnet').
     * @returns {Promise<object>} The token transfer data.
     * @throws {Error} If the query fails.
     */
    static getTransactionTransfers(txHash: string, network?: string): Promise<any>;
    /**
     * Get the count of wallets for each supported network.
     *
     * @returns {Promise<object>} The wallet counts per network.
     * @throws {Error} If the query fails.
     */
    static getWalletCounts(): Promise<any>;
}

export { CavosAuth };
