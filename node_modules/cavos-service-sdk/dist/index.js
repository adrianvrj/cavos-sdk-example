"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  CavosAuth: () => CavosAuth
});
module.exports = __toCommonJS(index_exports);
var BASE_URL = "https://services.cavos.xyz/api/v1/external";
var CavosAuth = class {
  /**
   * Register a new user in an organization (Auth0 Database Connection) and create a wallet for them.
   *
   * @param {string} email - The user's email address.
   * @param {string} password - The user's password.
   * @param {string} orgSecret - The organization's secret token (used as Bearer token).
   * @param {string} [network='sepolia'] - The network to deploy the wallet on (default: 'sepolia').
   * @returns {Promise<object>} The user data, wallet info, and Auth0 user_id.
   * @throws {Error} If registration or wallet deployment fails.
   */
  static async signUp(email, password, orgSecret, network = "sepolia") {
    try {
      const res = await fetch(
        `${BASE_URL}/auth/register`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${orgSecret}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ email, password, network })
        }
      );
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(`signUp failed: ${res.status} ${JSON.stringify(errorData)}`);
      }
      return await res.json();
    } catch (error) {
      throw new Error(`signUp failed: ${error.message}`);
    }
  }
  /**
   * Log in a user using Auth0 (Resource Owner Password Grant) for the organization's connection.
   *
   * @param {string} email - The user's email address.
   * @param {string} password - The user's password.
   * @param {string} orgSecret - The organization's secret token (used as Bearer token).
   * @returns {Promise<object>} The user data, wallet info, and Auth0 access_token.
   * @throws {Error} If authentication fails.
   */
  static async signIn(email, password, orgSecret) {
    try {
      const res = await fetch(
        `${BASE_URL}/auth/login`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${orgSecret}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ email, password })
        }
      );
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(`signIn failed: ${res.status} ${JSON.stringify(errorData)}`);
      }
      return await res.json();
    } catch (error) {
      throw new Error(`signIn failed: ${error.message}`);
    }
  }
  /**
   * Deploy a new wallet using the cavos-wallet-provider external API.
   *
   * @param {string} network - The network to deploy the wallet on.
   * @param {string} apiKey - The API key or Bearer token for authentication.
   * @returns {Promise<object>} The wallet deployment data.
   * @throws {Error} If wallet deployment fails.
   */
  static async deployWallet(network, apiKey) {
    try {
      const res = await fetch(
        `${BASE_URL}/deploy`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${apiKey}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ network })
        }
      );
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(`deployWallet failed: ${res.status} ${JSON.stringify(errorData)}`);
      }
      return await res.json();
    } catch (error) {
      throw new Error(`deployWallet failed: ${error.message}`);
    }
  }
  /**
   * Execute an action (transaction) using the cavos-wallet-provider external API.
   *
   * @param {string} network - The network to execute the transaction on.
   * @param {any[]} calls - The transaction calls to execute.
   * @param {string} address - The wallet address.
   * @param {string} hashedPk - The hashed private key.
   * @param {string} apiKey - The API key or Bearer token for authentication.
   * @returns {Promise<object>} The transaction result.
   * @throws {Error} If the transaction fails.
   */
  static async executeAction(network, calls, address, hashedPk, apiKey) {
    try {
      const res = await fetch(
        `${BASE_URL}/execute`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${apiKey}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ network, calls, address, hashedPk })
        }
      );
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(`executeAction failed: ${res.status} ${JSON.stringify(errorData)}`);
      }
      return await res.json();
    } catch (error) {
      throw new Error(`executeAction failed: ${error.message}`);
    }
  }
  /**
   * Get token transfers for a given transaction hash.
   *
   * @param {string} txHash - The transaction hash.
   * @param {string} [network='mainnet'] - The network to query (default: 'mainnet').
   * @returns {Promise<object>} The token transfer data.
   * @throws {Error} If the query fails.
   */
  static async getTransactionTransfers(txHash, network = "mainnet") {
    try {
      const url = new URL(`${BASE_URL}/tx`);
      url.searchParams.append("txHash", txHash);
      url.searchParams.append("network", network);
      const res = await fetch(url.toString());
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(`getTransactionTransfers failed: ${res.status} ${JSON.stringify(errorData)}`);
      }
      return await res.json();
    } catch (error) {
      throw new Error(`getTransactionTransfers failed: ${error.message}`);
    }
  }
  /**
   * Get the count of wallets for each supported network.
   *
   * @returns {Promise<object>} The wallet counts per network.
   * @throws {Error} If the query fails.
   */
  static async getWalletCounts() {
    try {
      const res = await fetch(`${BASE_URL}/wallets/count`);
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(`getWalletCounts failed: ${res.status} ${JSON.stringify(errorData)}`);
      }
      return await res.json();
    } catch (error) {
      throw new Error(`getWalletCounts failed: ${error.message}`);
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CavosAuth
});
